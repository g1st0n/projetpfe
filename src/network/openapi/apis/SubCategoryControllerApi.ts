/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageSubCategoryResponseDTO,
  Pageable,
  SubCategoryRequestDTO,
  SubCategoryResponseDTO,
} from '../models/index';
import {
    PageSubCategoryResponseDTOFromJSON,
    PageSubCategoryResponseDTOToJSON,
    PageableFromJSON,
    PageableToJSON,
    SubCategoryRequestDTOFromJSON,
    SubCategoryRequestDTOToJSON,
    SubCategoryResponseDTOFromJSON,
    SubCategoryResponseDTOToJSON,
} from '../models/index';

export interface CreateSubCategoryRequest {
    subCategoryRequestDTO: SubCategoryRequestDTO;
}

export interface DeleteSubCategoryRequest {
    id: number;
}

export interface GetSubCategoriesRequest {
    pageable: Pageable;
}

export interface GetSubCategoryByIdRequest {
    id: number;
}

export interface UpdateSubCategoryRequest {
    subCategoryRequestDTO: SubCategoryRequestDTO;
}

/**
 * 
 */
export class SubCategoryControllerApi extends runtime.BaseAPI {

    /**
     */
    async createSubCategoryRaw(requestParameters: CreateSubCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubCategoryResponseDTO>> {
        if (requestParameters['subCategoryRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'subCategoryRequestDTO',
                'Required parameter "subCategoryRequestDTO" was null or undefined when calling createSubCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/subcategories/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubCategoryRequestDTOToJSON(requestParameters['subCategoryRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubCategoryResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async createSubCategory(requestParameters: CreateSubCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubCategoryResponseDTO> {
        const response = await this.createSubCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSubCategoryRaw(requestParameters: DeleteSubCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSubCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/subcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSubCategory(requestParameters: DeleteSubCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubCategoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllSubCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubCategoryResponseDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/subcategories/showAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubCategoryResponseDTOFromJSON));
    }

    /**
     */
    async getAllSubCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubCategoryResponseDTO>> {
        const response = await this.getAllSubCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubCategoriesRaw(requestParameters: GetSubCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageSubCategoryResponseDTO>> {
        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getSubCategories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/subcategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageSubCategoryResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getSubCategories(requestParameters: GetSubCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageSubCategoryResponseDTO> {
        const response = await this.getSubCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubCategoryByIdRaw(requestParameters: GetSubCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubCategoryResponseDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSubCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/subcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubCategoryResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getSubCategoryById(requestParameters: GetSubCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubCategoryResponseDTO> {
        const response = await this.getSubCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSubCategoryRaw(requestParameters: UpdateSubCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubCategoryResponseDTO>> {
        if (requestParameters['subCategoryRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'subCategoryRequestDTO',
                'Required parameter "subCategoryRequestDTO" was null or undefined when calling updateSubCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/subcategories/{id}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubCategoryRequestDTOToJSON(requestParameters['subCategoryRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubCategoryResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async updateSubCategory(requestParameters: UpdateSubCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubCategoryResponseDTO> {
        const response = await this.updateSubCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
