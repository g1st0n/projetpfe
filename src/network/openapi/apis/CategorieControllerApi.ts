/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FamilleProduct,
} from '../models/index';
import {
    FamilleProductFromJSON,
    FamilleProductToJSON,
} from '../models/index';

export interface EditcatRequest {
    familleProduct: FamilleProduct;
}

export interface GetByIdRequest {
    id: number;
}

export interface GetCatRequest {
    id: number;
}

export interface SaveCatRequest {
    familleProduct: FamilleProduct;
}

/**
 * 
 */
export class CategorieControllerApi extends runtime.BaseAPI {

    /**
     */
    async editcatRaw(requestParameters: EditcatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FamilleProduct>> {
        if (requestParameters['familleProduct'] == null) {
            throw new runtime.RequiredError(
                'familleProduct',
                'Required parameter "familleProduct" was null or undefined when calling editcat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editCat`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FamilleProductToJSON(requestParameters['familleProduct']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FamilleProductFromJSON(jsonValue));
    }

    /**
     */
    async editcat(requestParameters: EditcatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FamilleProduct> {
        const response = await this.editcatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllcatRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FamilleProduct>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FamilleProductFromJSON));
    }

    /**
     */
    async getAllcat(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FamilleProduct>> {
        const response = await this.getAllcatRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FamilleProduct>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cat/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FamilleProductFromJSON(jsonValue));
    }

    /**
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FamilleProduct> {
        const response = await this.getByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCatRaw(requestParameters: GetCatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deleteCat/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getCat(requestParameters: GetCatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCatRaw(requestParameters, initOverrides);
    }

    /**
     */
    async saveCatRaw(requestParameters: SaveCatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FamilleProduct>> {
        if (requestParameters['familleProduct'] == null) {
            throw new runtime.RequiredError(
                'familleProduct',
                'Required parameter "familleProduct" was null or undefined when calling saveCat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/saveCat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FamilleProductToJSON(requestParameters['familleProduct']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FamilleProductFromJSON(jsonValue));
    }

    /**
     */
    async saveCat(requestParameters: SaveCatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FamilleProduct> {
        const response = await this.saveCatRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
