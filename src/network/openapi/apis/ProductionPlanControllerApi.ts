/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductionPlanRequestDTO,
  ProductionPlanResponseDTO,
} from '../models/index';
import {
    ProductionPlanRequestDTOFromJSON,
    ProductionPlanRequestDTOToJSON,
    ProductionPlanResponseDTOFromJSON,
    ProductionPlanResponseDTOToJSON,
} from '../models/index';

export interface ConfirmProductionPlanRequest {
    productionPlanRequestDTO: ProductionPlanRequestDTO;
}

export interface CreateProductionPlanRequest {
    productionPlanRequestDTO: ProductionPlanRequestDTO;
}

export interface DeleteProductionPlanRequest {
    idPlanning: number;
}

export interface GeneratePdf4Request {
    productionPlanId: number;
}

export interface GetProductionPlanByIdRequest {
    idPlanning: number;
}

export interface UpdateProductionPlanRequest {
    productionPlanRequestDTO: ProductionPlanRequestDTO;
}

/**
 * 
 */
export class ProductionPlanControllerApi extends runtime.BaseAPI {

    /**
     */
    async confirmProductionPlanRaw(requestParameters: ConfirmProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionPlanResponseDTO>> {
        if (requestParameters['productionPlanRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'productionPlanRequestDTO',
                'Required parameter "productionPlanRequestDTO" was null or undefined when calling confirmProductionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/production-plans/confirm/{idPlanning}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionPlanRequestDTOToJSON(requestParameters['productionPlanRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionPlanResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async confirmProductionPlan(requestParameters: ConfirmProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionPlanResponseDTO> {
        const response = await this.confirmProductionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProductionPlanRaw(requestParameters: CreateProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionPlanResponseDTO>> {
        if (requestParameters['productionPlanRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'productionPlanRequestDTO',
                'Required parameter "productionPlanRequestDTO" was null or undefined when calling createProductionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/production-plans/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionPlanRequestDTOToJSON(requestParameters['productionPlanRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionPlanResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async createProductionPlan(requestParameters: CreateProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionPlanResponseDTO> {
        const response = await this.createProductionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteProductionPlanRaw(requestParameters: DeleteProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idPlanning'] == null) {
            throw new runtime.RequiredError(
                'idPlanning',
                'Required parameter "idPlanning" was null or undefined when calling deleteProductionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/production-plans/{idPlanning}`.replace(`{${"idPlanning"}}`, encodeURIComponent(String(requestParameters['idPlanning']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteProductionPlan(requestParameters: DeleteProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductionPlanRaw(requestParameters, initOverrides);
    }

    /**
     */
    async generatePdf4Raw(requestParameters: GeneratePdf4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['productionPlanId'] == null) {
            throw new runtime.RequiredError(
                'productionPlanId',
                'Required parameter "productionPlanId" was null or undefined when calling generatePdf4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/production-plans/generate/{productionPlanId}`.replace(`{${"productionPlanId"}}`, encodeURIComponent(String(requestParameters['productionPlanId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async generatePdf4(requestParameters: GeneratePdf4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.generatePdf4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllProductionPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductionPlanResponseDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/production-plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductionPlanResponseDTOFromJSON));
    }

    /**
     */
    async getAllProductionPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductionPlanResponseDTO>> {
        const response = await this.getAllProductionPlansRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getProductionPlanByIdRaw(requestParameters: GetProductionPlanByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionPlanResponseDTO>> {
        if (requestParameters['idPlanning'] == null) {
            throw new runtime.RequiredError(
                'idPlanning',
                'Required parameter "idPlanning" was null or undefined when calling getProductionPlanById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/production-plans/{idPlanning}`.replace(`{${"idPlanning"}}`, encodeURIComponent(String(requestParameters['idPlanning']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionPlanResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getProductionPlanById(requestParameters: GetProductionPlanByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionPlanResponseDTO> {
        const response = await this.getProductionPlanByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProductionPlanRaw(requestParameters: UpdateProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionPlanResponseDTO>> {
        if (requestParameters['productionPlanRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'productionPlanRequestDTO',
                'Required parameter "productionPlanRequestDTO" was null or undefined when calling updateProductionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/production-plans/{idPlanning}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionPlanRequestDTOToJSON(requestParameters['productionPlanRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionPlanResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async updateProductionPlan(requestParameters: UpdateProductionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionPlanResponseDTO> {
        const response = await this.updateProductionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
